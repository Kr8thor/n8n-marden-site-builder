[
  {
    "id": "4CoggHF1MBJV6Txm",
    "name": "Marden site builder",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "httpMethod": "GET",
          "path": "webhook-content",
          "options": {}
        },
        "id": "c7965798-5c50-48b2-9a96-cdb84c8ae53b",
        "name": "Webhook Content",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 100]
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "url": "={{$json.siteUrl}}/wp-json/wp/v2/posts",
          "options": {
            "queryParameters": {
              "_embed": "true",
              "per_page": "10"
            }
          }
        },
        "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
        "name": "WordPress Content",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [300, 100],
        "credentials": {
          "httpBasicAuth": {
            "id": "1",
            "name": "WordPress Credentials"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Format WordPress data for React frontend\nreturn {\n  posts: items.map(item => {\n    const post = item.json;\n    return {\n      id: post.id,\n      title: post.title.rendered,\n      slug: post.slug,\n      content: post.content.rendered,\n      excerpt: post.excerpt.rendered,\n      featuredImage: post._embedded && \n                  post._embedded['wp:featuredmedia'] && \n                  post._embedded['wp:featuredmedia'][0] ? \n                  post._embedded['wp:featuredmedia'][0].source_url : null,\n      author: post._embedded && \n              post._embedded.author && \n              post._embedded.author[0] ? \n              post._embedded.author[0].name : null,\n      date: post.date,\n      modified: post.modified,\n      categories: post._embedded && \n                post._embedded['wp:term'] ? \n                post._embedded['wp:term'][0].map(cat => ({\n                  id: cat.id,\n                  name: cat.name,\n                  slug: cat.slug\n                })) : []\n    };\n  }),\n  totalPages: items.length > 0 && items[0].headers ? parseInt(items[0].headers['x-wp-totalpages']) || 1 : 1,\n  total: items.length > 0 && items[0].headers ? parseInt(items[0].headers['x-wp-total']) || 0 : 0\n};"
        },
        "id": "f8e7d6c5-b4a3-2109-8765-43210fedcba9",
        "name": "Transform Content",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [500, 100]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{$json}}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Cache-Control",
                  "value": "public, max-age=600"
                }
              ]
            }
          }
        },
        "id": "98765432-10fe-dcba-9012-34567890abcd",
        "name": "Respond Content",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 100]
      },
      {
        "parameters": {
          "httpMethod": "GET",
          "path": "webhook-list-posts",
          "options": {}
        },
        "id": "1a2b3c4d-5e6f-7890-1234-567890abcdef",
        "name": "Webhook List Posts",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 250]
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "url": "={{$json.siteUrl}}/wp-json/wp/v2/posts",
          "options": {
            "queryParameters": {
              "_embed": "true",
              "page": "={{$node[\"Webhook List Posts\"].json.query.page || \"1\"}}",
              "per_page": "={{$node[\"Webhook List Posts\"].json.query.per_page || \"10\"}}",
              "categories": "={{$node[\"Webhook List Posts\"].json.query.category}}",
              "search": "={{$node[\"Webhook List Posts\"].json.query.search}}"
            }
          }
        },
        "id": "f1e2d3c4-b5a6-9870-1234-567890abcdef",
        "name": "WordPress List Posts",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [300, 250],
        "credentials": {
          "httpBasicAuth": {
            "id": "1",
            "name": "WordPress Credentials"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Get pagination headers from the response\nconst headers = items[0]?.headers || {};\n\n// Create formatted post data for React frontend\nreturn {\n  posts: items.map(item => {\n    const post = item.json;\n    return {\n      id: post.id,\n      title: post.title.rendered,\n      slug: post.slug,\n      excerpt: post.excerpt.rendered,\n      featuredImage: post._embedded && \n                  post._embedded['wp:featuredmedia'] && \n                  post._embedded['wp:featuredmedia'][0] ? \n                  post._embedded['wp:featuredmedia'][0].source_url : null,\n      date: post.date,\n      modified: post.modified,\n      categories: post._embedded && \n                post._embedded['wp:term'] ? \n                post._embedded['wp:term'][0].map(cat => ({\n                  id: cat.id,\n                  name: cat.name,\n                  slug: cat.slug\n                })) : []\n    };\n  }),\n  totalPages: parseInt(headers['x-wp-totalpages'] || '1'),\n  total: parseInt(headers['x-wp-total'] || '0'),\n  currentPage: parseInt($node[\"Webhook List Posts\"].json.query.page || '1')\n};"
        },
        "id": "87654321-fedc-ba98-7654-3210fedcba98",
        "name": "Transform List Posts",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [500, 250]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{$json}}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Cache-Control",
                  "value": "public, max-age=600"
                }
              ]
            }
          }
        },
        "id": "2b3c4d5e-6f78-9012-3456-7890abcdef01",
        "name": "Respond List Posts",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 250]
      },
      {
        "parameters": {
          "httpMethod": "GET",
          "path": "webhook-get-menus",
          "options": {}
        },
        "id": "c8d9e0f1-a2b3-4c5d-6e7f-8091a2b3c4d5",
        "name": "Webhook Get Menus",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 400]
      },
      {
        "parameters": {
          "url": "={{$json.siteUrl}}/wp-json/wp-api-menus/v2/menus",
          "options": {
            "fullResponse": true
          }
        },
        "id": "e9f0a1b2-c3d4-5e6f-7890-1234567890ab",
        "name": "HTTP Request Get Menus",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [300, 400]
      },
      {
        "parameters": {
          "jsCode": "// Format menu data for React\nreturn items.map(item => {\n  return {\n    id: item.json.ID,\n    name: item.json.name,\n    slug: item.json.slug,\n    items: item.json.items?.map(menuItem => ({\n      id: menuItem.ID,\n      title: menuItem.title,\n      url: menuItem.url,\n      parent: menuItem.menu_item_parent,\n      order: menuItem.menu_order,\n      target: menuItem.target || '_self',\n      classes: menuItem.classes || [],\n      submenu: []\n    })) || []\n  };\n}).map(menu => {\n  // Organize menu items into hierarchical structure\n  const itemMap = {};\n  menu.items.forEach(item => { itemMap[item.id] = item; });\n  \n  const hierarchicalItems = [];\n  menu.items.forEach(item => {\n    if (!item.parent || item.parent === '0') {\n      hierarchicalItems.push(item);\n    } else if (itemMap[item.parent]) {\n      if (!itemMap[item.parent].submenu) {\n        itemMap[item.parent].submenu = [];\n      }\n      itemMap[item.parent].submenu.push(item);\n    }\n  });\n  \n  // Sort by menu order\n  hierarchicalItems.sort((a, b) => a.order - b.order);\n  hierarchicalItems.forEach(item => {\n    if (item.submenu && item.submenu.length > 0) {\n      item.submenu.sort((a, b) => a.order - b.order);\n    }\n  });\n  \n  return {\n    ...menu,\n    items: hierarchicalItems\n  };\n});"
        },
        "id": "f0a1b2c3-d4e5-6f78-9012-34567890abcd",
        "name": "Transform Get Menus",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [500, 400]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{$json}}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Cache-Control",
                  "value": "public, max-age=3600"
                }
              ]
            }
          }
        },
        "id": "a2b3c4d5-e6f7-8901-2345-67890abcdef0",
        "name": "Respond Get Menus",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 400]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "webhook-auth",
          "options": {}
        },
        "id": "b3c4d5e6-f7a8-9012-3456-7890abcdef01",
        "name": "Webhook Auth",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 550]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{$json.siteUrl}}/wp-json/jwt-auth/v1/token",
          "bodyParametersUi": {
            "parameter": [
              {
                "name": "username",
                "value": "={{$json.body.username}}"
              },
              {
                "name": "password",
                "value": "={{$json.body.password}}"
              }
            ]
          },
          "options": {
            "fullResponse": true
          }
        },
        "id": "c4d5e6f7-a8b9-0123-4567-890abcdef012",
        "name": "HTTP Request Auth",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [300, 550]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json.body.token}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "d5e6f7a8-b9c0-1234-5678-90abcdef0123",
        "name": "If Auth Success",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [500, 550]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify({\n  token: $json.body.token,\n  user: $json.body.user_display_name,\n  userId: $json.body.user_id,\n  userEmail: $json.body.user_email,\n  expire: Date.now() + (24 * 60 * 60 * 1000) // 24 hours in milliseconds\n}) }}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "e6f7a8b9-c0d1-2345-6789-0abcdef01234",
        "name": "Respond Auth Success",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 500]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"message\": \"Authentication failed\",\n  \"code\": \"{{$json.body.code || 'invalid_credentials'}}\"\n}",
          "options": {
            "responseCode": 401,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "f7a8b9c0-d1e2-3456-7890-abcdef012345",
        "name": "Respond Auth Fail",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 600]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "webhook-validate-token",
          "options": {}
        },
        "id": "a9b0c1d2-e3f4-5678-9012-34567890abcde",
        "name": "Webhook Validate Token",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 700]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{$json.siteUrl}}/wp-json/jwt-auth/v1/token/validate",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{$json.body.token}}"
              }
            ]
          },
          "options": {
            "fullResponse": true
          }
        },
        "id": "b0c1d2e3-f4a5-6789-0123-4567890abcdef",
        "name": "HTTP Request Validate Token",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [300, 700]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json.body.code}}",
                "operation": "notEqual",
                "value2": "jwt_auth_valid_token"
              }
            ]
          }
        },
        "id": "c1d2e3f4-a5b6-7890-1234-567890abcdef0",
        "name": "If Token Invalid",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [500, 700]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"valid\": false,\n  \"code\": \"{{$json.body.code || 'invalid_token'}}\",\n  \"message\": \"{{$json.body.message || 'Invalid authentication token'}}\"\n}",
          "options": {
            "responseCode": 401,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "d2e3f4a5-b6c7-8901-2345-67890abcde01",
        "name": "Respond Token Invalid",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 650]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"valid\": true,\n  \"user\": \"={{$json.body.data}}\"\n}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "e3f4a5b6-c7d8-9012-3456-7890abcdef012",
        "name": "Respond Token Valid",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 750]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "webhook-form-submit",
          "options": {}
        },
        "id": "f5a6b7c8-d9e0-1234-5678-90abcdef0123",
        "name": "Webhook Form Submit",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 850]
      },
      {
        "parameters": {
          "jsCode": "// Form validation\nconst { name, email, message } = $input.json.body;\nconst secretHeader = $input.json.headers['x-api-secret'];\n\n// Check API secret first\nif (secretHeader !== 'YOUR_SHARED_SECRET_HERE') {\n  return { valid: false, error: 'Unauthorized access', status: 403 };\n}\n\n// Validate required fields\nif (!name || !email || !message) {\n  return { valid: false, error: 'Missing required fields', status: 400 };\n}\n\n// Validate email format\nif (!email.match(/^\\w[-\\.\\+]*@([\\w-]+\\.)+[\\w-]{2,}$/)) {\n  return { valid: false, error: 'Invalid email format', status: 400 };\n}\n\n// Basic sanitization\nconst sanitizedData = {\n  name: name.replace(/[<>]/g, ''),\n  email: email.trim(),\n  message: message.replace(/[<>]/g, ''),\n  submission_date: new Date().toISOString(),\n  ip_address: $input.json.headers['x-forwarded-for'] || '0.0.0.0'\n};\n\nreturn { valid: true, data: sanitizedData };"
        },
        "id": "a6b7c8d9-e0f1-2345-6789-0abcdef01234",
        "name": "Validate Form Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [300, 850]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{$json.valid}}",
                "value2": true
              }
            ]
          }
        },
        "id": "b7c8d9e0-f1a2-3456-7890-abcdef012345",
        "name": "If Form Valid",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [500, 850]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{$json.siteUrl}}/wp-json/myapp/v1/form-submission",
          "authentication": "basicAuth",
          "headerParameters": {
            "parameters": [
              {
                "name": "X-API-SECRET",
                "value": "YOUR_SHARED_SECRET_HERE"
              }
            ]
          },
          "bodyParametersUi": {
            "parameter": [
              {
                "name": "data",
                "value": "={{ JSON.stringify($json.data) }}"
              }
            ]
          },
          "options": {
            "fullResponse": true
          }
        },
        "id": "c8d9e0f1-a2b3-4567-890a-bcdef0123456",
        "name": "HTTP Request Submit Form",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [700, 800],
        "credentials": {
          "httpBasicAuth": {
            "id": "1",
            "name": "WordPress Credentials"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process the WordPress form submission response\nconst response = $input.json;\n\n// Check if the submission was successful\nif (response && response.statusCode >= 200 && response.statusCode < 300) {\n  return {\n    success: true,\n    message: 'Form submitted successfully',\n    reference: response.body?.reference || null\n  };\n} else {\n  // Handle potential WordPress errors\n  return {\n    success: false,\n    message: response.body?.message || 'Form submission failed',\n    errors: response.body?.errors || []\n  };\n}"
        },
        "id": "d8e0f1a2-b3c4-5678-90ab-bcdef0123456",
        "name": "Process Form Response",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [900, 800]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify($json) }}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "d9e0f1a2-b3c4-5678-90ab-cdef01234567",
        "name": "Respond Form Success",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [1100, 800]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"error\": \"={{$json.error || 'Form submission failed'}}\"\n}",
          "options": {
            "responseCode": "={{$json.status || 400}}",
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "e0f1a2b3-c4d5-6789-0abc-def012345678",
        "name": "Respond Form Error",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 900]
      },
      {
        "parameters": {
          "httpMethod": "GET",
          "path": "webhook-get-single-post",
          "options": {}
        },
        "id": "f7g8h9i0-j1k2-3456-789a-bcdefghijk34",
        "name": "Webhook Get Single Post",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [100, 1000]
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "url": "={{$json.siteUrl}}/wp-json/wp/v2/posts/{{$node[\"Webhook Get Single Post\"].json.query.id}}",
          "options": {
            "queryParameters": {
              "_embed": "true"
            }
          }
        },
        "id": "g8h9i0j1-k2l3-4567-89ab-cdefghijkl56",
        "name": "WordPress Get Single Post",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [300, 1000],
        "credentials": {
          "httpBasicAuth": {
            "id": "1",
            "name": "WordPress Credentials"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Format single post data for React frontend\nconst post = $input.json.body;\n\nif (!post || !post.id) {\n  return {\n    success: false,\n    message: 'Post not found'\n  };\n}\n\nreturn {\n  success: true,\n  post: {\n    id: post.id,\n    title: post.title.rendered,\n    slug: post.slug,\n    content: post.content.rendered,\n    excerpt: post.excerpt.rendered,\n    featuredImage: post._embedded && \n                post._embedded['wp:featuredmedia'] && \n                post._embedded['wp:featuredmedia'][0] ? \n                post._embedded['wp:featuredmedia'][0].source_url : null,\n    author: post._embedded && \n            post._embedded.author && \n            post._embedded.author[0] ? \n            post._embedded.author[0].name : null,\n    authorAvatar: post._embedded && \n                post._embedded.author && \n                post._embedded.author[0] && \n                post._embedded.author[0].avatar_urls ? \n                post._embedded.author[0].avatar_urls['96'] : null,\n    date: post.date,\n    modified: post.modified,\n    categories: post._embedded && \n                post._embedded['wp:term'] ? \n                post._embedded['wp:term'][0].map(cat => ({\n                  id: cat.id,\n                  name: cat.name,\n                  slug: cat.slug\n                })) : [],\n    tags: post._embedded && \n          post._embedded['wp:term'] && \n          post._embedded['wp:term'][1] ? \n          post._embedded['wp:term'][1].map(tag => ({\n            id: tag.id,\n            name: tag.name,\n            slug: tag.slug\n          })) : []\n  }\n};"
        },
        "id": "h9i0j1k2-l3m4-567a-bcde-fghijklmno78",
        "name": "Format Single Post",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [500, 1000]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify($json) }}",
          "options": {
            "responseCode": "={{$json.success ? 200 : 404}}",
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Cache-Control",
                  "value": "public, max-age=300"
                }
              ]
            }
          }
        },
        "id": "i0j1k2l3-m4n5-678b-cdef-ghijklmnop90",
        "name": "Respond Single Post",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [700, 1000]
      }
    ],
    "connections": {
      "c7965798-5c50-48b2-9a96-cdb84c8ae53b": {
        "main": [
          [
            {
              "node": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "a1b2c3d4-e5f6-7890-1234-567890abcdef": {
        "main": [
          [
            {
              "node": "f8e7d6c5-b4a3-2109-8765-43210fedcba9",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "f8e7d6c5-b4a3-2109-8765-43210fedcba9": {
        "main": [
          [
            {
              "node": "98765432-10fe-dcba-9012-34567890abcd",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "1a2b3c4d-5e6f-7890-1234-567890abcdef": {
        "main": [
          [
            {
              "node": "f1e2d3c4-b5a6-9870-1234-567890abcdef",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "f1e2d3c4-b5a6-9870-1234-567890abcdef": {
        "main": [
          [
            {
              "node": "87654321-fedc-ba98-7654-3210fedcba98",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "87654321-fedc-ba98-7654-3210fedcba98": {
        "main": [
          [
            {
              "node": "2b3c4d5e-6f78-9012-3456-7890abcdef01",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "c8d9e0f1-a2b3-4c5d-6e7f-8091a2b3c4d5": {
        "main": [
          [
            {
              "node": "e9f0a1b2-c3d4-5e6f-7890-1234567890ab",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "e9f0a1b2-c3d4-5e6f-7890-1234567890ab": {
        "main": [
          [
            {
              "node": "f0a1b2c3-d4e5-6f78-9012-34567890abcd",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "f0a1b2c3-d4e5-6f78-9012-34567890abcd": {
        "main": [
          [
            {
              "node": "a2b3c4d5-e6f7-8901-2345-67890abcdef0",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "b3c4d5e6-f7a8-9012-3456-7890abcdef01": {
        "main": [
          [
            {
              "node": "c4d5e6f7-a8b9-0123-4567-890abcdef012",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "c4d5e6f7-a8b9-0123-4567-890abcdef012": {
        "main": [
          [
            {
              "node": "d5e6f7a8-b9c0-1234-5678-90abcdef0123",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "d5e6f7a8-b9c0-1234-5678-90abcdef0123": {
        "main": [
          [
            {
              "node": "e6f7a8b9-c0d1-2345-6789-0abcdef01234",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "f7a8b9c0-d1e2-3456-7890-abcdef012345",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "a9b0c1d2-e3f4-5678-9012-34567890abcde": {
        "main": [
          [
            {
              "node": "b0c1d2e3-f4a5-6789-0123-4567890abcdef",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "b0c1d2e3-f4a5-6789-0123-4567890abcdef": {
        "main": [
          [
            {
              "node": "c1d2e3f4-a5b6-7890-1234-567890abcdef0",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "c1d2e3f4-a5b6-7890-1234-567890abcdef0": {
        "main": [
          [
            {
              "node": "d2e3f4a5-b6c7-8901-2345-67890abcde01",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "e3f4a5b6-c7d8-9012-3456-7890abcdef012",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "f5a6b7c8-d9e0-1234-5678-90abcdef0123": {
        "main": [
          [
            {
              "node": "a6b7c8d9-e0f1-2345-6789-0abcdef01234",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "a6b7c8d9-e0f1-2345-6789-0abcdef01234": {
        "main": [
          [
            {
              "node": "b7c8d9e0-f1a2-3456-7890-abcdef012345",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "b7c8d9e0-f1a2-3456-7890-abcdef012345": {
        "main": [
          [
            {
              "node": "c8d9e0f1-a2b3-4567-890a-bcdef0123456",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "e0f1a2b3-c4d5-6789-0abc-def012345678",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "c8d9e0f1-a2b3-4567-890a-bcdef0123456": {
        "main": [
          [
            {
              "node": "d8e0f1a2-b3c4-5678-90ab-bcdef0123456",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "d8e0f1a2-b3c4-5678-90ab-bcdef0123456": {
        "main": [
          [
            {
              "node": "d9e0f1a2-b3c4-5678-90ab-cdef01234567",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "f7g8h9i0-j1k2-3456-789a-bcdefghijk34": {
        "main": [
          [
            {
              "node": "g8h9i0j1-k2l3-4567-89ab-cdefghijkl56",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "g8h9i0j1-k2l3-4567-89ab-cdefghijkl56": {
        "main": [
          [
            {
              "node": "h9i0j1k2-l3m4-567a-bcde-fghijklmno78",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "h9i0j1k2-l3m4-567a-bcde-fghijklmno78": {
        "main": [
          [
            {
              "node": "i0j1k2l3-m4n5-678b-cdef-ghijklmnop90",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    }
  }
]